// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPGOnboardingTool.Infrastructure.Data;

#nullable disable

namespace RPGOnboardingTool.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Closing")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWeightCarried")
                        .HasColumnType("int");

                    b.Property<int>("EncumbranceValue")
                        .HasColumnType("int");

                    b.Property<bool>("HasFinanceChip")
                        .HasColumnType("bit");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Movement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Rushing")
                        .HasColumnType("int");

                    b.Property<int>("SCL")
                        .HasColumnType("int");

                    b.Property<int>("SkillPointsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("StatPointsRemaining")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Unis")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterEquipment", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "EquipmentItemId");

                    b.HasIndex("EquipmentItemId");

                    b.ToTable("CharacterEquipments");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterTrait", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("CharacterTraits");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.EquipmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStartingGear")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("EquipmentItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de6c31f7-19fc-4be5-ac78-a3475db3f1ec"),
                            Cost = 200,
                            Description = "",
                            IsStartingGear = false,
                            Name = "Standard Pistol",
                            Type = 0,
                            Weight = 2f
                        },
                        new
                        {
                            Id = new Guid("e2b28b71-02e2-4941-9623-04c147bbbedf"),
                            Cost = 50,
                            Description = "",
                            IsStartingGear = false,
                            Name = "Combat Knife",
                            Type = 0,
                            Weight = 1f
                        },
                        new
                        {
                            Id = new Guid("551c9af6-d5d3-4d14-9951-5c569fe7d588"),
                            Cost = 500,
                            Description = "",
                            IsStartingGear = false,
                            Name = "Light Body Armor",
                            Type = 0,
                            Weight = 10f
                        },
                        new
                        {
                            Id = new Guid("75719949-4c16-4dde-8c85-ae789313ae06"),
                            Cost = 100,
                            Description = "",
                            IsStartingGear = false,
                            Name = "Medkit",
                            Type = 0,
                            Weight = 2f
                        },
                        new
                        {
                            Id = new Guid("0387e818-af92-4323-b840-6bf805f5e5cf"),
                            Cost = 1000,
                            Description = "",
                            IsStartingGear = false,
                            Name = "Heavy Rifle",
                            Type = 0,
                            Weight = 15f
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseClosingSpeed")
                        .HasColumnType("int");

                    b.Property<int>("BaseEncumbrance")
                        .HasColumnType("int");

                    b.Property<int>("BaseInitiative")
                        .HasColumnType("int");

                    b.Property<int>("BaseMovement")
                        .HasColumnType("int");

                    b.Property<int>("BaseRushingSpeed")
                        .HasColumnType("int");

                    b.Property<bool>("CanHaveFinanceChip")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<int>("MaxLuck")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 10,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Balanced and adaptable.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Human"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 8,
                            BaseMovement = 5,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = false,
                            Description = "Stalwart and protective.",
                            MaxHp = 60,
                            MaxLuck = 2,
                            Name = "Ebonite (Blue)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 7,
                            BaseMovement = 5,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = false,
                            Description = "Aggressive and powerful.",
                            MaxHp = 70,
                            MaxLuck = 1,
                            Name = "Ebonite (Red Frother)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 9,
                            BaseMovement = 7,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Intelligent and diplomatic.",
                            MaxHp = 45,
                            MaxLuck = 4,
                            Name = "Neophron"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 9,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Resilient and cunning.",
                            MaxHp = 55,
                            MaxLuck = 3,
                            Name = "Shaktar"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 11,
                            BaseMovement = 7,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Brutal and intimidating.",
                            MaxHp = 65,
                            MaxLuck = 2,
                            Name = "Stormer 313 (Malice)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 12,
                            BaseMovement = 8,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Stealthy and agile.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Stormer 711 (Xeno)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 10,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Observant and tracking.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Wraithen"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("224b4e4f-ff6c-4197-932e-614c06a725b4"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Detect"
                        },
                        new
                        {
                            Id = new Guid("3a279f6e-2a70-4cae-9f43-af85e3f498b3"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Education: Academic"
                        },
                        new
                        {
                            Id = new Guid("37a9a0a9-2a27-42ba-8558-b049e80da865"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "EBB - Heal"
                        },
                        new
                        {
                            Id = new Guid("63cdea4d-301b-4668-a447-a5028e994c7f"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Protect"
                        },
                        new
                        {
                            Id = new Guid("d0991492-0448-49e7-b04c-b25517cc8ec1"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Thermal: Blue Ebonite"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceStatLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceStatLimit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac20ad7e-21e8-45b7-a9ea-a6a5c912694a"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("e4d62b43-19c6-448f-9aa6-40926f1c3b96"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("56b9a7ce-a685-49f1-8cdb-5ea5a73585ad"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("01eda5b0-1be1-4568-b89a-fc39fe0786e0"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("dc1e25ad-70fa-4f58-8284-e23d0256a195"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("2d3a7ad1-26e5-449e-b922-bab62929b9d4"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("2928b26c-8cde-4a4a-a981-5176782ff193"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("bb11d0bc-c165-4fb2-b0d3-af03ea6b1e9d"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("2329548b-7554-4120-985e-1123a8e75524"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("a1821baa-c4eb-4336-a756-5d03c0d801ff"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("55194fb0-1d3d-479d-96a7-1a5ddc0d4737"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("af1ceac7-1e38-4e09-a25f-236e8f31ae9c"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("6c477028-b151-42ab-8d36-26d4705d1a01"),
                            MaxValue = 8,
                            MinValue = 3,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("ca247e06-870a-4728-886e-64acb31dc954"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("5aa8fdfc-be4e-4bb8-9ed7-f919d3b0009f"),
                            MaxValue = 4,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("8acfee73-29f1-4174-beba-13617f39ad28"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("8bcbc49c-7559-4e39-9338-1d4192ad43dc"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("7660b18b-934f-4390-aa7c-88d1d894ee8f"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("d46633c3-9fab-41ad-9267-b3d426e714ed"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("73cd8db8-7759-45e9-aaac-a779da167073"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("3d47ff4e-865e-4f68-873c-d86850d35f08"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("ac7570db-977c-4302-b92f-20e90601ea89"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("819be7df-43da-48c8-9d29-04ee967191ef"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("b3a23b13-b6e8-42d5-b3fc-98b96a7982d2"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("267fd28f-e52f-488d-9757-8bed0483ff86"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("e01d73ed-7e56-464a-bb22-b02e02c74569"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("cbef87c3-e1bb-4f82-81b2-0b994733076b"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("acc7038e-f078-4266-bf81-9eb366c3f144"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("e6fa4db9-e4f1-4caf-a512-16a2ac595dfa"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("5b148b17-bf22-4e60-aa4d-35a8cb98930a"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("3ce0c988-a30f-4158-a051-fce9cfcea591"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("975199ae-dd4f-4766-9f56-65709c6f0351"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("67b91fa0-4a69-4bbf-a54b-b263c9302334"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("f2bf7e9d-1a26-468b-b0c2-44f951e3d958"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("bf3a15c3-7099-4c93-ba67-c5ac946ae46c"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("39ad4473-5ab4-471f-b508-2afcd56d54ef"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("50a2efeb-8b40-43f3-8602-6c83c3ff756b"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("d8757849-b68b-46e5-bc3f-b676701015f5"),
                            MaxValue = 8,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("726ff972-572e-4bfc-bcb3-8a3f328959c3"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("6e7c9077-9720-4ea2-9cb3-75a076db3c4c"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("11a353c9-b49a-46f8-b59d-4864367db906"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("e63d82a4-f627-44e9-94c5-0f94b06da77b"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("9520a019-9717-4b77-959d-3091f39877c1"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("475276ea-dc7f-41c3-8670-4426fc7b4bf7"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("13ba6495-e57a-44f6-a0c7-ea81fc862aca"),
                            MaxValue = 7,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("7cf28e91-b87e-4f10-81f9-7533bee07a75"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("c3567693-0037-48ab-b64a-344b815f7716"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("07dcaa79-da64-4488-8e21-45bd8e2f98f5"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            StatType = 9
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Bonus")
                        .HasColumnType("int");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RelatedStat")
                        .HasColumnType("int");

                    b.Property<int>("SkillDice")
                        .HasColumnType("int");

                    b.Property<int>("SuccessDie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.SkillDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedStat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8274fa30-7ad3-42c9-a6ba-9815d545a860"),
                            Name = "Athletics",
                            RelatedStat = 0
                        },
                        new
                        {
                            Id = new Guid("bd556058-a66e-4947-a6a7-ee953c4fd822"),
                            Name = "Acrobatics",
                            RelatedStat = 1
                        },
                        new
                        {
                            Id = new Guid("1075ef11-18a4-479a-9a87-b1981caffe5c"),
                            Name = "Stealth",
                            RelatedStat = 1
                        },
                        new
                        {
                            Id = new Guid("ca7da61e-8b28-47e3-91b1-fed4bae13cf0"),
                            Name = "History",
                            RelatedStat = 6
                        },
                        new
                        {
                            Id = new Guid("20dee273-b02a-4650-8e68-9df55ad5d5a6"),
                            Name = "Persuasion",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("e85ddfd3-592c-4b00-a25d-f77213d95224"),
                            Name = "Intimidation",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("21656afc-ffc4-4851-a321-96e8aab757f4"),
                            Name = "Deception",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("f5b469e5-c862-42fb-adf5-a50597a4dd5f"),
                            Name = "Insight",
                            RelatedStat = 9
                        },
                        new
                        {
                            Id = new Guid("dee75071-2edd-4513-9742-368dd602b526"),
                            Name = "Survival",
                            RelatedStat = 9
                        },
                        new
                        {
                            Id = new Guid("9653df85-2f9a-4bbf-9feb-e8f4b014d61d"),
                            Name = "Detect",
                            RelatedStat = 9
                        },
                        new
                        {
                            Id = new Guid("54f2a03b-f043-4f90-abd2-dd6c3cbb76e5"),
                            Name = "Education: Academic",
                            RelatedStat = 6
                        },
                        new
                        {
                            Id = new Guid("e0bf9e29-42ed-492a-90c5-dfa654a99d48"),
                            Name = "EBB - Heal",
                            RelatedStat = 6
                        },
                        new
                        {
                            Id = new Guid("18dfedcb-d917-4c4b-b67f-2e68c235b02f"),
                            Name = "Protect",
                            RelatedStat = 0
                        },
                        new
                        {
                            Id = new Guid("41afeccb-9d77-4e0b-8993-827c548e4368"),
                            Name = "Thermal: Blue Ebonite",
                            RelatedStat = 2
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPackages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445501"),
                            Description = "A balanced training package for humans.",
                            Name = "Human Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445502"),
                            Description = "A training package focused on protection and support for Blue Ebonites.",
                            Name = "Ebonite (Blue) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445503"),
                            Description = "A training package focused on aggression for Red Frother Ebonites.",
                            Name = "Ebonite (Red Frother) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445504"),
                            Description = "A training package for Neophron diplomats and intellectuals.",
                            Name = "Neophron Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445505"),
                            Description = "A training package for the cunning and resilient Shaktar.",
                            Name = "Shaktar Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445506"),
                            Description = "A brutal training package for the Stormer 313.",
                            Name = "Stormer 313 (Malice) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445507"),
                            Description = "A stealth-focused training package for the Stormer 711.",
                            Name = "Stormer 711 (Xeno) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445508"),
                            Description = "A training package for the observant Wraithen.",
                            Name = "Wraithen Training Package"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("TrainingPackageSkill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bd773af-6ba7-4b8c-9fcf-410d94d3f92b"),
                            Rank = 1,
                            SkillName = "Athletics",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445501")
                        },
                        new
                        {
                            Id = new Guid("a6b74d21-583e-4fe8-aab5-aaeb17b9dc83"),
                            Rank = 2,
                            SkillName = "Protect",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445502")
                        },
                        new
                        {
                            Id = new Guid("7d42ba6e-af61-4dfc-aedd-f05530d79c96"),
                            Rank = 2,
                            SkillName = "Intimidation",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445503")
                        },
                        new
                        {
                            Id = new Guid("0c4426ce-612a-48d0-ad00-d495840c015f"),
                            Rank = 2,
                            SkillName = "Persuasion",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445504")
                        },
                        new
                        {
                            Id = new Guid("a817487d-5e4b-4ba0-a3b2-d07220d94f6c"),
                            Rank = 2,
                            SkillName = "Stealth",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445505")
                        },
                        new
                        {
                            Id = new Guid("f76be0b2-e767-45ad-aa19-124f88fc2545"),
                            Rank = 2,
                            SkillName = "Athletics",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445506")
                        },
                        new
                        {
                            Id = new Guid("326c0524-0dfa-40d9-93db-41da67ac10b6"),
                            Rank = 2,
                            SkillName = "Acrobatics",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445507")
                        },
                        new
                        {
                            Id = new Guid("bddf3b5b-0096-470f-b037-046c31600ff7"),
                            Rank = 2,
                            SkillName = "Insight",
                            TrainingPackageId = new Guid("b1b2c3d4-e5f6-4000-8000-112233445508")
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageStatRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("TrainingPackageStatRequirement");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Trait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasePointCost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int>("MaxRankAtCreation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresDetail")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Traits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b31c2a50-00ae-42fc-a3f3-da80a923d5c9"),
                            BasePointCost = -5,
                            Description = "Increases resistance to fear effects.",
                            IsUnique = false,
                            MaxRankAtCreation = 1,
                            Name = "Bravery",
                            RequiresDetail = false,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("c7854eb1-b2bb-414d-8900-72bcfb1e0a92"),
                            BasePointCost = 10,
                            Description = "A negative trait that imposes penalties.",
                            IsUnique = false,
                            MaxRankAtCreation = 1,
                            Name = "Cursed",
                            RequiresDetail = false,
                            Type = 1
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "CharacterRace")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId");

                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "CharacterTrainingPackage")
                        .WithMany("Characters")
                        .HasForeignKey("TrainingPackageId");

                    b.Navigation("CharacterRace");

                    b.Navigation("CharacterTrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterEquipment", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("CharacterEquipment")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGOnboardingTool.Core.Models.EquipmentItem", "EquipmentItem")
                        .WithMany("CharacterEquipment")
                        .HasForeignKey("EquipmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("EquipmentItem");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterTrait", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("CharacterTraits")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGOnboardingTool.Core.Models.Trait", "Trait")
                        .WithMany("CharacterTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceSkill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "Race")
                        .WithMany("SpeciesSkills")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceStatLimit", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "Race")
                        .WithMany("StatLimits")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Skill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Stat", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageSkill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "TrainingPackage")
                        .WithMany("PackageSkills")
                        .HasForeignKey("TrainingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageStatRequirement", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "TrainingPackage")
                        .WithMany("StatRequirements")
                        .HasForeignKey("TrainingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.Navigation("CharacterEquipment");

                    b.Navigation("CharacterTraits");

                    b.Navigation("Skills");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.EquipmentItem", b =>
                {
                    b.Navigation("CharacterEquipment");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Race", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("SpeciesSkills");

                    b.Navigation("StatLimits");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackage", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("PackageSkills");

                    b.Navigation("StatRequirements");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Trait", b =>
                {
                    b.Navigation("CharacterTraits");
                });
#pragma warning restore 612, 618
        }
    }
}
