// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPGOnboardingTool.Infrastructure.Data;

#nullable disable

namespace RPGOnboardingTool.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712150145_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Closing")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWeightCarried")
                        .HasColumnType("int");

                    b.Property<int>("EncumbranceValue")
                        .HasColumnType("int");

                    b.Property<bool>("HasFinanceChip")
                        .HasColumnType("bit");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("Movement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rushing")
                        .HasColumnType("int");

                    b.Property<int>("SCL")
                        .HasColumnType("int");

                    b.Property<int>("SkillPointsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("StatPointsRemaining")
                        .HasColumnType("int");

                    b.Property<Guid?>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Unis")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterEquipment", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "EquipmentItemId");

                    b.HasIndex("EquipmentItemId");

                    b.ToTable("CharacterEquipments");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterTrait", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "TraitId");

                    b.HasIndex("TraitId");

                    b.ToTable("CharacterTraits");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.EquipmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStartingGear")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WeightFactor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EquipmentItems");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseClosingSpeed")
                        .HasColumnType("int");

                    b.Property<int>("BaseEncumbrance")
                        .HasColumnType("int");

                    b.Property<int>("BaseInitiative")
                        .HasColumnType("int");

                    b.Property<int>("BaseMovement")
                        .HasColumnType("int");

                    b.Property<int>("BaseRushingSpeed")
                        .HasColumnType("int");

                    b.Property<bool>("CanHaveFinanceChip")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<int>("MaxLuck")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 10,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Balanced and adaptable.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Human"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 8,
                            BaseMovement = 5,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = false,
                            Description = "Stalwart and protective.",
                            MaxHp = 60,
                            MaxLuck = 2,
                            Name = "Ebonite (Blue)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445503"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 7,
                            BaseMovement = 5,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = false,
                            Description = "Aggressive and powerful.",
                            MaxHp = 70,
                            MaxLuck = 1,
                            Name = "Ebonite (Red Frother)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445504"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 9,
                            BaseMovement = 7,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Intelligent and diplomatic.",
                            MaxHp = 45,
                            MaxLuck = 4,
                            Name = "Neophron"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445505"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 9,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Resilient and cunning.",
                            MaxHp = 55,
                            MaxLuck = 3,
                            Name = "Shaktar"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445506"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 11,
                            BaseMovement = 7,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Brutal and intimidating.",
                            MaxHp = 65,
                            MaxLuck = 2,
                            Name = "Stormer 313 (Malice)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445507"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 12,
                            BaseMovement = 8,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Stealthy and agile.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Stormer 711 (Xeno)"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4000-8000-112233445508"),
                            BaseClosingSpeed = 0,
                            BaseEncumbrance = 0,
                            BaseInitiative = 10,
                            BaseMovement = 6,
                            BaseRushingSpeed = 0,
                            CanHaveFinanceChip = true,
                            Description = "Observant and tracking.",
                            MaxHp = 50,
                            MaxLuck = 3,
                            Name = "Wraithen"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceSkills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5df3861-f2f2-4667-b12a-376c4ffce138"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Detect"
                        },
                        new
                        {
                            Id = new Guid("320988c2-cebc-442a-851f-fc124897dfcc"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Education: Academic"
                        },
                        new
                        {
                            Id = new Guid("648580cd-9609-4406-a404-e3bce0414de4"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "EBB - Heal"
                        },
                        new
                        {
                            Id = new Guid("b3dec809-7143-48cc-9b08-2b39b7dcd1f2"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Protect"
                        },
                        new
                        {
                            Id = new Guid("d1010e1f-ac91-45c5-879b-a54d9d53b868"),
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            Rank = 1,
                            SkillName = "Thermal: Blue Ebonite"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceStatLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceStatLimit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64159957-dd22-4886-bb9e-7023813d2156"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("e3be5f67-fd2f-436e-93de-d0f3dff09e81"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("b944ccbb-f8c9-4eaa-a5a1-37dd7440d870"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("87fbbdb3-42a9-440a-8429-87183f63124e"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("02e91a5d-45e8-4451-8126-6f5de50fd869"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("a2a1af3c-2b01-4ed7-9054-43079bf02831"),
                            MaxValue = 6,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445501"),
                            StatType = 9
                        },
                        new
                        {
                            Id = new Guid("48aee723-bb23-4806-9cb0-bf51bd1cdcad"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 0
                        },
                        new
                        {
                            Id = new Guid("bb4a35cf-6411-4573-b793-927cbb50653e"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 1
                        },
                        new
                        {
                            Id = new Guid("94f07249-bef9-4692-967b-5846f5103d81"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 6
                        },
                        new
                        {
                            Id = new Guid("1ac0a675-38fd-422e-b777-d9f3fd845d27"),
                            MaxValue = 5,
                            MinValue = 1,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 7
                        },
                        new
                        {
                            Id = new Guid("8338f01d-b1cf-434e-89b0-5a46466c3fe2"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 8
                        },
                        new
                        {
                            Id = new Guid("19b84944-a385-40f2-aed6-3879ca292457"),
                            MaxValue = 7,
                            MinValue = 2,
                            RaceId = new Guid("a1b2c3d4-e5f6-4000-8000-112233445502"),
                            StatType = 9
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Bonus")
                        .HasColumnType("int");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RelatedStat")
                        .HasColumnType("int");

                    b.Property<int>("SkillDice")
                        .HasColumnType("int");

                    b.Property<int>("SuccessDie")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.SkillDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelatedStat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillDefinitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6931104-be8d-4919-b5b7-b0c6afa62270"),
                            Name = "Athletics",
                            RelatedStat = 0
                        },
                        new
                        {
                            Id = new Guid("a2e33479-dccd-4cd1-8a61-8fbcd0ca952a"),
                            Name = "Acrobatics",
                            RelatedStat = 1
                        },
                        new
                        {
                            Id = new Guid("8ace087f-9b8e-414b-be06-2c6ce789f9dc"),
                            Name = "Stealth",
                            RelatedStat = 1
                        },
                        new
                        {
                            Id = new Guid("58fb471d-ec02-493e-a336-dfe6e22a798e"),
                            Name = "History",
                            RelatedStat = 6
                        },
                        new
                        {
                            Id = new Guid("c9b8b964-0633-4c10-b489-648958340ad0"),
                            Name = "Persuasion",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("0b5cd697-9fee-4056-abba-31d17a4626ec"),
                            Name = "Intimidation",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("c0e5ecef-057d-4970-9a0c-03906e5dda1e"),
                            Name = "Deception",
                            RelatedStat = 8
                        },
                        new
                        {
                            Id = new Guid("9d021f3b-0f9c-4b86-953a-069b437f587e"),
                            Name = "Insight",
                            RelatedStat = 9
                        },
                        new
                        {
                            Id = new Guid("fb771c80-279f-4185-8dec-28adf138204b"),
                            Name = "Survival",
                            RelatedStat = 9
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TrainingPackages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445501"),
                            Description = "A balanced training package for humans.",
                            Name = "Human Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445502"),
                            Description = "A training package focused on protection and support for Blue Ebonites.",
                            Name = "Ebonite (Blue) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445503"),
                            Description = "A training package focused on aggression for Red Frother Ebonites.",
                            Name = "Ebonite (Red Frother) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445504"),
                            Description = "A training package for Neophron diplomats and intellectuals.",
                            Name = "Neophron Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445505"),
                            Description = "A training package for the cunning and resilient Shaktar.",
                            Name = "Shaktar Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445506"),
                            Description = "A brutal training package for the Stormer 313.",
                            Name = "Stormer 313 (Malice) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445507"),
                            Description = "A stealth-focused training package for the Stormer 711.",
                            Name = "Stormer 711 (Xeno) Training Package"
                        },
                        new
                        {
                            Id = new Guid("b1b2c3d4-e5f6-4000-8000-112233445508"),
                            Description = "A training package for the observant Wraithen.",
                            Name = "Wraithen Training Package"
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("TrainingPackageSkill");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageStatRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPackageId");

                    b.ToTable("TrainingPackageStatRequirement");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Trait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BasePointCost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<int>("MaxRankAtCreation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresDetail")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Traits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1bed305-1bc0-4c80-a7db-87658df58779"),
                            BasePointCost = 0,
                            Description = "Increases resistance to fear effects.",
                            IsUnique = false,
                            MaxRankAtCreation = 1,
                            Name = "Bravery",
                            RequiresDetail = false,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("087dc64a-cb3f-4138-8942-2dfa527ecd84"),
                            BasePointCost = 0,
                            Description = "A negative trait that imposes penalties.",
                            IsUnique = false,
                            MaxRankAtCreation = 1,
                            Name = "Cursed",
                            RequiresDetail = false,
                            Type = 0
                        });
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "CharacterRace")
                        .WithMany("Characters")
                        .HasForeignKey("RaceId");

                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "CharacterTrainingPackage")
                        .WithMany("Characters")
                        .HasForeignKey("TrainingPackageId");

                    b.Navigation("CharacterRace");

                    b.Navigation("CharacterTrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterEquipment", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("CharacterEquipment")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGOnboardingTool.Core.Models.EquipmentItem", "EquipmentItem")
                        .WithMany("CharacterEquipment")
                        .HasForeignKey("EquipmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("EquipmentItem");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.CharacterTrait", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("CharacterTraits")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPGOnboardingTool.Core.Models.Trait", "Trait")
                        .WithMany("CharacterTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceSkill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "Race")
                        .WithMany("SpeciesSkills")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.RaceStatLimit", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Race", "Race")
                        .WithMany("StatLimits")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Skill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Stat", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.Character", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageSkill", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "TrainingPackage")
                        .WithMany("PackageSkills")
                        .HasForeignKey("TrainingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackageStatRequirement", b =>
                {
                    b.HasOne("RPGOnboardingTool.Core.Models.TrainingPackage", "TrainingPackage")
                        .WithMany("StatRequirements")
                        .HasForeignKey("TrainingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPackage");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Character", b =>
                {
                    b.Navigation("CharacterEquipment");

                    b.Navigation("CharacterTraits");

                    b.Navigation("Skills");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.EquipmentItem", b =>
                {
                    b.Navigation("CharacterEquipment");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Race", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("SpeciesSkills");

                    b.Navigation("StatLimits");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.TrainingPackage", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("PackageSkills");

                    b.Navigation("StatRequirements");
                });

            modelBuilder.Entity("RPGOnboardingTool.Core.Models.Trait", b =>
                {
                    b.Navigation("CharacterTraits");
                });
#pragma warning restore 612, 618
        }
    }
}
